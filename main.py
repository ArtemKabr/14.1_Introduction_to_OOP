import os
import sys

from src.models import Category, LawnGrass, Product, Smartphone
from src.utils import load_data_from_json

sys.path.append(os.path.join(os.path.dirname(__file__), "src"))


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ products.json
    –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –∏ —Ç–æ–≤–∞—Ä–∞—Ö.
    """
    json_path = os.path.join(os.path.dirname(__file__), "products.json")
    categories = load_data_from_json(json_path)

    print("\nüì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã:\n")
    for category in categories:
        print(f"üîπ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {category.description}")
        print(f"   –ö–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {category.product_list_str().count(chr(10)) + 1}")
        print(category.product_list_str())
        print()

    print(f"üìä –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {Category.category_count}")
    print(f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {Category.product_count}")


if __name__ == "__main__":
    main()

    # üîΩ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:
    product1 = Product(
        "Samsung Galaxy S23 Ultra", "256GB, –°–µ—Ä—ã–π —Ü–≤–µ—Ç, 200MP –∫–∞–º–µ—Ä–∞", 180000.0, 5
    )
    product2 = Product("Iphone 15", "512GB, Gray space", 210000.0, 8)
    product3 = Product("Xiaomi Redmi Note 11", "1024GB, –°–∏–Ω–∏–π", 31000.0, 14)

    print(str(product1))
    print(str(product2))
    print(str(product3))

    category1 = Category(
        "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
        "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –∫–∞–∫ —Å—Ä–µ–¥—Å—Ç–≤–æ –Ω–µ —Ç–æ–ª—å–∫–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, –Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏",
        [product1, product2, product3],
    )

    print(str(category1))

    print(product1 + product2)
    print(product1 + product3)
    print(product2 + product3)

    # üõí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    print("\nüõí –î–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    print(category1.product_list_str())

    product4 = Product('55" QLED 4K', "–§–æ–Ω–æ–≤–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞", 123000.0, 7)
    category1.add_product(product4)

    print("\nüõí –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    print(category1.product_list_str())
    print(f"–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category1.product_list_str().count(chr(10)) + 1}")
    print(f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {Category.product_count}")

    # ‚≠ê –ü—Ä–æ–≤–µ—Ä–∫–∞ classmethod
    catalog = [product1]
    duplicate = {
        "name": "Samsung Galaxy S23 Ultra",
        "description": "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è",
        "price": 200000.0,
        "quantity": 2,
    }
    updated_product = Product.new_product(duplicate, catalog)
    print(
        f"\nüÜï –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: {updated_product.name}, {updated_product.price}‚ÇΩ, {updated_product.quantity} —à—Ç."
    )

    # üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    print("\nüí∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–Ω—ã:")
    updated_product.price = 210000
    print(updated_product.price)

    print("\nüí∞ –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º:")
    updated_product.price = 150000

    print(f"‚û°Ô∏è –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–Ω–∏–∂–µ–Ω–∏—è: {updated_product.price}")

    print("\nüí∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–Ω—ã:")
    updated_product.price = -1
    updated_product.price = 0

    # üì± –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤
    smartphone1 = Smartphone("iPhone 15", "512GB", 210000, 4, 97.5, "15", 512, "Gray")
    smartphone2 = Smartphone(
        "Samsung S23", "256GB", 190000, 3, 96.2, "S23", 256, "Black"
    )

    # üåø –°–æ–∑–¥–∞–Ω–∏–µ –≥–∞–∑–æ–Ω–Ω–æ–π —Ç—Ä–∞–≤—ã
    grass1 = LawnGrass(
        "–ì–∞–∑–æ–Ω–Ω–∞—è —Ç—Ä–∞–≤–∞", "–≠–ª–∏—Ç–Ω–∞—è", 500, 10, "–†–æ—Å—Å–∏—è", "5 –¥–Ω–µ–π", "–ó–µ–ª–µ–Ω—ã–π"
    )
    grass2 = LawnGrass(
        "–ì–∞–∑–æ–Ω–Ω–∞—è —Ç—Ä–∞–≤–∞ 2", "–î–ª—è —Ç–µ–Ω–∏", 450, 5, "–°–®–ê", "7 –¥–Ω–µ–π", "–¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π"
    )

    # ‚úÖ –°–ª–æ–∂–µ–Ω–∏–µ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö
    print("\n‚úÖ –°–ª–æ–∂–µ–Ω–∏–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤:")
    print(smartphone1 + smartphone2)

    print("\n‚úÖ –°–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–∞–≤:")
    print(grass1 + grass2)

    # ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ª–æ–∂–µ–Ω–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    print("\n‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Å–ª–æ–∂–∏—Ç—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω –∏ —Ç—Ä–∞–≤—É:")
    try:
        result = smartphone1 + grass1
    except TypeError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    category_smartphones = Category("–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", [])
    category_smartphones.add_product(smartphone1)

    # ‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ —Ç–æ–≤–∞—Ä–∞
    print("\n‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ-–ø—Ä–æ–¥—É–∫—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    try:
        category_smartphones.add_product("–Ω–µ –ø—Ä–æ–¥—É–∫—Ç")
    except TypeError as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
